#include
#include <malloc.h>

using namespace std;

struct Cliente {
int numeroCuenta;
int tipoCuenta;
Cliente* siguiente;
};

struct FilaEspera {
Cliente* frente;
int tamano;
};

void inicializarFila(FilaEspera* fila) {
fila->frente = NULL;
fila->tamano = 0;
}

void agregarCliente(FilaEspera* fila, int numeroCuenta, int tipoCuenta) {
Cliente* nuevoCliente = (Cliente*)malloc(sizeof(Cliente));
nuevoCliente->numeroCuenta = numeroCuenta;
nuevoCliente->tipoCuenta = tipoCuenta;
nuevoCliente->siguiente = NULL;

if (fila->frente == NULL) {
    fila->frente = nuevoCliente;
} else {
    Cliente* actual = fila->frente;
    while (actual->siguiente != NULL) {
        actual = actual->siguiente;
    }
    actual->siguiente = nuevoCliente;
}
fila->tamano++;
}

void mostrarFila(FilaEspera* fila, const char* nombreFila) {
Cliente* actual = fila->frente;
int turno = 1;
cout << "Clientes en la fila " << nombreFila << ":\n";
while (actual != NULL) {
cout << "Turno " << turno << ": ";
cout << "Cuenta: " << actual->numeroCuenta << " - ";
cout << "Tipo: ";
if (actual->tipoCuenta == 1) {
cout << "Preferencial\n";
} else {
cout << "Tradicional\n";
}
actual = actual->siguiente;
turno++;
}
cout << endl;
}

void eliminarCliente(FilaEspera* fila, Cliente* clienteAEliminar) {
if (fila->frente == NULL) {
return;
}

if (fila->frente == clienteAEliminar) {
    fila->frente = clienteAEliminar->siguiente;
    free(clienteAEliminar);
    fila->tamano--;
    return;
}

Cliente* actual = fila->frente;
while (actual->siguiente != clienteAEliminar) {
    actual = actual->siguiente;
}

actual->siguiente = clienteAEliminar->siguiente;
free(clienteAEliminar);
fila->tamano--;
}

void verificarTransferencia(FilaEspera* filaPreferencial, FilaEspera* filaTradicional) {
if (filaTradicional->tamano >= 5 && filaPreferencial->tamano <= 2) {
if (filaTradicional->frente != NULL) {
Cliente* clienteATransferir = filaTradicional->frente;
for (int i = 1; i < 3; ++i) {
if (clienteATransferir == NULL) {
return;
}
clienteATransferir = clienteATransferir->siguiente;
}
if (clienteATransferir != NULL) {

            Cliente* nuevoClienteTransferido = (Cliente*)malloc(sizeof(Cliente));
            nuevoClienteTransferido->numeroCuenta = clienteATransferir->numeroCuenta;
            nuevoClienteTransferido->tipoCuenta = clienteATransferir->tipoCuenta;
            nuevoClienteTransferido->siguiente = NULL;

            
            agregarCliente(filaPreferencial, nuevoClienteTransferido->numeroCuenta, nuevoClienteTransferido->tipoCuenta);

            
            eliminarCliente(filaTradicional, clienteATransferir);
        }
    }
}
}

void atenderCliente(FilaEspera* fila) {
if (fila->frente != NULL) {
Cliente* clienteAtendido = fila->frente;
eliminarCliente(fila, clienteAtendido);
} else {
cout << "No hay clientes en la fila para atender.\n";
}
}

int main() {
FilaEspera filaPreferencial, filaTradicional;
inicializarFila(&filaPreferencial);
inicializarFila(&filaTradicional);

char opcion;
do {
    cout << "Menu:\n";
    cout << "1. Registrar cliente en fila preferencial\n";
    cout << "2. Registrar cliente en fila tradicional\n";
    cout << "3. Atender cliente de fila preferencial\n";
    cout << "4. Atender cliente de fila tradicional\n";
    cout << "5. Mostrar filas\n";
    cout << "6. Salir\n";
    cout << "Ingrese su opcion: ";
    cin >> opcion;

    switch (opcion) {
        case 1: {
            int numeroCuenta;
            cout << "Ingrese el numero de cuenta del cliente: ";
            cin >> numeroCuenta;
            agregarCliente(&filaPreferencial, numeroCuenta, 1);
            verificarTransferencia(&filaPreferencial, &filaTradicional);
            break;
        }
        case 2: {
            int numeroCuenta;
            cout << "Ingrese el numero de cuenta del cliente: ";
            cin >> numeroCuenta;
            agregarCliente(&filaTradicional, numeroCuenta, 2);
            verificarTransferencia(&filaPreferencial, &filaTradicional);
            break;
        }
        case 3: {
            atenderCliente(&filaPreferencial);
            break;
        }
        case 4: {
            atenderCliente(&filaTradicional);
            break;
        }
        case 5: {
            mostrarFila(&filaPreferencial, "preferencial");
            mostrarFila(&filaTradicional, "tradicional");
            break;
        }
        case 6:
            cout << "Saliendo del programa...\n";
            break;
        default:
            cout << "Opcion invalida. Por favor, intente de nuevo.\n";
    }
} while (opcion != '6');

return 0;
}
